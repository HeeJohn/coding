"""Description
XX게임에는 피로도 시스템(0 이상의 정수로 표현합니다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있습니다. 이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있습니다. "최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타냅니다. 예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모됩니다.

이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 합니다. 유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때, 유저가 탐험할수 있는 최대 던전 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
k는 1 이상 5,000 이하인 자연수입니다.
dungeons의 세로(행) 길이(즉, 던전의 개수)는 1 이상 8 이하입니다.
dungeons의 가로(열) 길이는 2 입니다.
dungeons의 각 행은 각 던전의 ["최소 필요 피로도", "소모 피로도"] 입니다.
"최소 필요 피로도"는 항상 "소모 피로도"보다 크거나 같습니다.
"최소 필요 피로도"와 "소모 피로도"는 1 이상 1,000 이하인 자연수입니다.
서로 다른 던전의 ["최소 필요 피로도", "소모 피로도"]가 서로 같을 수 있습니다.
입출력 예
k	dungeons	result
80	[[80,20],[50,40],[30,10]]	3
입출력 예 설명
현재 피로도는 80입니다.

만약, 첫 번째 → 두 번째 → 세 번째 던전 순서로 탐험한다면

현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있습니다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60입니다.
남은 피로도는 60이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있습니다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 20입니다.
남은 피로도는 20이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30입니다. 따라서 세 번째 던전은 탐험할 수 없습니다.
만약, 첫 번째 → 세 번째 → 두 번째 던전 순서로 탐험한다면

현재 피로도는 80이며, 첫 번째 던전을 돌기위해 필요한 "최소 필요 피로도" 또한 80이므로, 첫 번째 던전을 탐험할 수 있습니다. 첫 번째 던전의 "소모 피로도"는 20이므로, 던전을 탐험한 후 남은 피로도는 60입니다.
남은 피로도는 60이며, 세 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 30이므로, 세 번째 던전을 탐험할 수 있습니다. 세 번째 던전의 "소모 피로도"는 10이므로, 던전을 탐험한 후 남은 피로도는 50입니다.
남은 피로도는 50이며, 두 번째 던전을 돌기위해 필요한 "최소 필요 피로도"는 50이므로, 두 번째 던전을 탐험할 수 있습니다. 두 번째 던전의 "소모 피로도"는 40이므로, 던전을 탐험한 후 남은 피로도는 10입니다.
따라서 이 경우 세 던전을 모두 탐험할 수 있으며, 유저가 탐험할 수 있는 최대 던전 수는 3입니다."""

# 던전에 들어가려면, 최소피로도를 만족해야 한다.
# => 따라서 들어가기 전에 최소피도로를 만족하면 들어가고, 만족 안하면 끝
# 던전에 들어갔으면, 피로도가 소모된다.
# => 따라서 던전에 들어간 후 피로도를 감소시킨다.

# 결론적으로, 구하고 싶은 것은 던전에 들어간 횟수이므로, solution 함수에서는 카운트를 관리
# enterDungeon함수에서는 현재 던전을 기준으로 던전의 탐험 횟수의 최댓값을 유지한다.
# ex) k: 80, dungeons : [[80,20],[50,40],[30,10]], count : 0 == Max : 0
# [80,20] 던전 탐험 후 -> count : 1, max : 1 | dungeons : [50,40],[30,10] | k : 60 ------------- 1
# [50,40] 던전 탐험 후 -> count : 2, max : 2 | dungeons : [30,10] | k : 20 ------------- 2
# [30,10] 던전은 최소 피로도가 만족하지 않으므로, 탐험하지 못함. ----------------- 3
# 그럼 함수 3(스택)에서 count(2)를 반환하고, 마지막 3(스택)은 pop되고, 2번 함수로 돌아감.  ----------- 2
# 2번 함수입장에서는 고를 수 있는 던전의 수는 [30,20] 밖에 없었는데, 그것의 조건이 만족하지 않으므로, 더 이상 던전 입장 x ---- 2
# 여기서 2(스택)에서 Max로 유지하고 있던 값은 2이므로 2를 반환하고 1(스택)으로 돌아감 -------------- 1
# 여기서 Max는 1이었는데, newCount가 2로 반환되었으므로, Max를 2로 유지함. ---------1 
# 이후 다시 for에서 1을 증가시켜 [50,40] 보다 [30,40] 던전의 조건을 먼저 살펴봄. -> 조건을 만족 ---------1 
# [30,10] 던전 탐험 후 -> count : 2, Max : 2 | dungeons : [30,10] | k : 50 ------------- 2
# [50,40] 던전 탐험 후 -> count : 3, Max : 3 | dungeons : [] | k : 10 ----- 3 
# 다음 던전은 없음 count(3)을 반환 -------- 4
# 3(스택)에서 최댓값 Max(3)을 반환 ------ 3 
# 2(스택)에서 최대값은 Max(2)였으나, 3(스택)에서 반환된 newCount가 3이므로 최댓값 Max를 3으로 유지 ----- 2
# 위의 작업 반복



def afterDungeon(consumedEnergy, k):
    return k - consumedEnergy

def isQualify(minEnergy, k):
    if minEnergy > k:
        return False
    return True

def isBigger(Max, new) :
    if Max<new : return True
    return False

def enterDungeon(k, dungeons, count):
    Max = count
    
    if not dungeons: #재귀함수 탈출 조건
        return count

    for i in range(len(dungeons)):
        if isQualify(dungeons[i][0], k): #최소 피로도를 만족하면,
            after = afterDungeon(dungeons[i][1], k) # 던전에 들어가서, 소모 피로도 계산.
            new = enterDungeon(after, dungeons[:i] + dungeons[i+1:], count + 1)#들어간 던전 수
            if isBigger(Max,new) : Max = new #던전에 제일 많이 들어간 수를 저장.
    return Max

def solution(k, dungeons):
    count = 0 
    return enterDungeon(k, dungeons, count)




# - **시간복잡도**
#     - n개 중에 조건이 만족하는 던전 하나를 골라 탐험.
#         - n-1개의 던전 중 최소 피로도 조건을 만족하는 던전을 탐험.
#         - 탐험하고 n-2 중에서 또 최소피로도 조건을 만족하는 던전을 탐험
#     - 이 과정을 반복
#     - 최악의 경우 O(n!)의 시간 복잡도, 하지만 실제로는 조건이 맞지 않는 경우 들어가지 않는 경우가 있어서 O(n!)보다는 개선된 시간에 해결가능.