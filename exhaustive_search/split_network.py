"""Description
n개의 송전탑이 전선을 통해 하나의 트리 형태로 연결되어 있습니다. 당신은 이 전선들 중 하나를 끊어서 현재의 전력망 네트워크를 2개로 분할하려고 합니다. 이때, 두 전력망이 갖게 되는 송전탑의 개수를 최대한 비슷하게 맞추고자 합니다.

송전탑의 개수 n, 그리고 전선 정보 wires가 매개변수로 주어집니다. 전선들 중 하나를 끊어서 송전탑 개수가 가능한 비슷하도록 두 전력망으로 나누었을 때, 두 전력망이 가지고 있는 송전탑 개수의 차이(절대값)를 return 하도록 solution 함수를 완성해주세요.

제한사항
n은 2 이상 100 이하인 자연수입니다.
wires는 길이가 n-1인 정수형 2차원 배열입니다.
wires의 각 원소는 [v1, v2] 2개의 자연수로 이루어져 있으며, 이는 전력망의 v1번 송전탑과 v2번 송전탑이 전선으로 연결되어 있다는 것을 의미합니다.
1 ≤ v1 < v2 ≤ n 입니다.
전력망 네트워크가 하나의 트리 형태가 아닌 경우는 입력으로 주어지지 않습니다.
입출력 예
n	wires	result
9	[[1,3],[2,3],[3,4],[4,5],[4,6],[4,7],[7,8],[7,9]]	3
4	[[1,2],[2,3],[3,4]]	0
7	[[1,2],[2,7],[3,7],[3,4],[4,5],[6,7]]	1
입출력 예 설명
입출력 예 #1

다음 그림은 주어진 입력을 해결하는 방법 중 하나를 나타낸 것입니다.
ex1.png
4번과 7번을 연결하는 전선을 끊으면 두 전력망은 각 6개와 3개의 송전탑을 가지며, 이보다 더 비슷한 개수로 전력망을 나눌 수 없습니다.
또 다른 방법으로는 3번과 4번을 연결하는 전선을 끊어도 최선의 정답을 도출할 수 있습니다.
입출력 예 #2

다음 그림은 주어진 입력을 해결하는 방법을 나타낸 것입니다.
ex2.png
2번과 3번을 연결하는 전선을 끊으면 두 전력망이 모두 2개의 송전탑을 가지게 되며, 이 방법이 최선입니다.
입출력 예 #3

다음 그림은 주어진 입력을 해결하는 방법을 나타낸 것입니다.
ex3.png
3번과 7번을 연결하는 전선을 끊으면 두 전력망이 각각 4개와 3개의 송전탑을 가지게 되며, 이 방법이 최선입니다.
"""

# 전선을 순차적으로 하나씩 자르고, 
# 자른선에 연결되어있던 송전탑을 중심으로 
# 전력망의 크기를 파악

# 1. 순차적으로 전선 자르기
# 2. 자른선을 제외한 전선들 이용하여 송전탑 개수 카운트
# 3. 송전탑 개수를 카운트하기 위해 dfs를 이용
# 4. 방문하지 않은 송전탑을 카운트할때 count를 증가시킴.

# [[1,3],[2,3],[3,4],[4,5],[4,6],[4,7],[7,8],[7,9]]
# [3,4]을 자른다고 했을 때 
# 나눠지는 전력망은 3을 중심으로 1개
# 4를 중심으로 1개
# 3부터 시작해서 연결된 전력망을 방문한다. 

## 여기서 3과 연결된 부분은 wire[1]일수도 wire[2]일수도 있음
## 두 송전탑을 모두 비교하여 3과 연결된 부분을 탐방
# 여기서는 [1,3], [2, 3]을 탐방 -> 1(3부터 시작) + 1(1) + 1(2) = 3임

# 반대로 4는 [4,5],[4,6],[4,7] 을 탐색 -> 1(4) + 1(5) + 1(6) + ?(7)
# [4,5]에서는 5번 송전탑과 연결된 부분이 없으므로, 1만 반환, [4,6]도 마찬가지 
# [4,7]에서는 7과 연결된 부분이 [7,8], [7,9] 임
#  8과 9 송전탑과 연결된 부분이 없으므로 각 1을 반환
# 그럼 [4,7]은 1 + 1 + 1을 반환한다.
# 다시 4로 돌아와 1(4) + 1(5) + 1(6) + 3(7) = 6이 반환된다.
# 따라서 6-3으로 3이 답이 됨.

# 여기서 격차가 가장 작은 3이 답이 됨.


def count_vertex(vertex, wires, visited):
    visited[vertex] = True
    count = 1
    for v1, v2 in wires:
        if v1 == vertex and not visited[v2]: 
            count += count_vertex(v2, wires, visited)
        elif v2 == vertex and not visited[v1]:
            count += count_vertex(v1, wires, visited)
    return count

def cutWire(wire, wires, n):
    vertex1, vertex2 = wire[0], wire[1]
    
    visited = [False] * (n+1)
    
    visited[0] = True  
    
    visited[vertex1] = True
    visited[vertex2] = True
    
    # 전선을 제외한 나머지 전선들로 두 전력망을 구성
    wires_without_cut = [w for w in wires if w != wire]
    
    # 각 전력망의 송전탑 개수 계산
    count1 = count_vertex(vertex1, wires_without_cut, visited)
    count2 = count_vertex(vertex2, wires_without_cut, visited)
    
    # 두 전력망의 송전탑 개수 차이 반환
    return abs(count1 - count2)

def solution(n, wires):
    min_diff = n
    for wire in wires:
        diff = cutWire(wire, wires, n)
        if diff < min_diff:
            min_diff = diff
    return min_diff
