"""
Description
고속도로를 이동하는 모든 차량이 고속도로를 이용하면서 단속용 카메라를 한 번은 만나도록 카메라를 설치하려고 합니다.

고속도로를 이동하는 차량의 경로 routes가 매개변수로 주어질 때, 모든 차량이 한 번은 단속용 카메라를 만나도록 하려면 최소 몇 대의 카메라를 설치해야 하는지를 return 하도록 solution 함수를 완성하세요.

제한사항

차량의 대수는 1대 이상 10,000대 이하입니다.
routes에는 차량의 이동 경로가 포함되어 있으며 routes[i][0]에는 i번째 차량이 고속도로에 진입한 지점, routes[i][1]에는 i번째 차량이 고속도로에서 나간 지점이 적혀 있습니다.
차량의 진입/진출 지점에 카메라가 설치되어 있어도 카메라를 만난것으로 간주합니다.
차량의 진입 지점, 진출 지점은 -30,000 이상 30,000 이하입니다.
입출력 예

routes	return
[[-20,-15], [-14,-5], [-18,-13], [-5,-3]]	2
입출력 예 설명

-5 지점에 카메라를 설치하면 두 번째, 네 번째 차량이 카메라를 만납니다.

-15 지점에 카메라를 설치하면 첫 번째, 세 번째 차량이 카메라를 만납니다."""


def solution(routes):
    routes.sort(key=lambda x: x[1])  
    exit = routes[0][1] 
    installed = 0

    for route in routes:
        if exit < route[0]: # 기준 진출지점이 현재 차량의 진입 지점과 겹치지 않을 때
            installed+=1 # 카메라 설치
            exit = route[1]  # 기준지점을 겹치지 않는 차량의 진출지점로 업데이트

    return installed + 1 #맨 마지막 구간에 대한 카메라 설치 (비교대상이 없기 때문)



"""- 알고리즘 : 그리디 + 완탐
    - 진출지점이 가장 빠른 순서대로 정렬 후
    - 순서대로 탐색하며 겹치지 않을 때 카메라 설치

- 시간복잡도
    - routes 길이 → n일 때
    - 정렬 O(nlogn)
    - 탐색 O(n)
    - 결론 : O(nlogn)

- 설명
    - 모든 차량은 진입지점이 진출지점보다 작음 ( 더 왼쪽에 있음 )
    - 기준 차량의 진출지점이 현재 비교하는 차량의 진입지점보다 크면, 겹치는 경우임.
        - 더 작을 때 겹치지 않는데, 이때는 카메라를 설치하여 현 시점까지 겹쳤던 차량들을 커버함."""